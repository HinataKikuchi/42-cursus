<引数>
可変長引数、char型のポインタ


<動作>
#書式指定子一覧
https://www.k-cube.co.jp/wakaba/server/format.html
〇	%c(Character)
△	%s(String)
	##精度の文字数分出力に注意。
〇	%d(digit)
〇	%i(≒d)
	%u(unsigned)

	%p(pointer)
〇	%x(小文字の十六進数のマイナスの値)
	ex. -1 = ffffffff(8桁)
〇	%X(大文字の十六進数のマイナスの値)
	ex. -1 = FFFFFFFF(8桁)

#フラグ一覧
-(左詰め)
0(0埋め)
##-と0は同時に使うとエラーが出ることがある。ここら辺要確認
.
*(引数指定)

#フラグ書式
%[フラグ][最小フィールド幅].[精度][長さ修飾子][変換指定子]
##最小フィールド幅にはマイナスの値が入る可能性がある。
##最小フィールド幅はマイナスの記号がいくつ入っていても大丈夫。
##最小フィールド幅がINT_MAXの場合はリターンが-1で何も出力されない。	

[フラグ]＝フラグ一覧を参照
[最小フィールド幅]=
[精度]=「精度」は変換指定子によって意味が異なり、
整数変換の場合、最低表示桁数を表し、足りない場合は0で埋められる。
文字列変換だと文字数の意になってる

#bonus
l, ll, h, hh

<戻り値>
-1:ERROR
出力した文字数

<undefined behavior>
0フラグとsの併用

````````````````````````<code 2021/1/18>`````````````````````
#include <stdio.h>
int main(void)
{
printf("[%-*s]\n",2,"abcdef");
printf("[%0*s]\n",2,"abcdef");
printf("[%0*d]\n",2,12345);
printf("[%-*d]\n",2,12345);
printf("[%-*s]\n",6,"abcdef");
printf("[%0*s]\n",6,"abcdef");
printf("[%0*d]\n",6,12345);
printf("[%-*d]\n",6,12345);
return 0;
}
```````````````````````````````````````````````````````````````
``````````````````````<gcc results 2021/1/18>``````````````````
main.c:6:12: warning: flag '0' results in undefined behavior with 's' conversion specifier [-Wformat]
        printf("[%0*s]\n",2,"abcdef");
                 ~^~~
main.c:10:12: warning: flag '0' results in undefined behavior with 's' conversion specifier [-Wformat]
        printf("[%0*s]\n",6,"abcdef");
                 ~^~~
2 warnings generated.
```````````````````````````````````````````````````````````````
````````````````````````<results 2021/1/18>````````````````````
[abcdef]
[abcdef]
[12345]
[12345]
[abcdef]
[abcdef]
[012345]
[12345 ]
```````````````````````````````````````````````````````````````

<2021/1/29>
#leak対応
o	main_char
o	main_string
o	main_digit
o	main_integer
o	main_unsigned
o	main_small_hex
o	main_large_hex
o	main_pointer



#戻り値対応
X

#null表示対応
X

#%dの.0または.のみの対応
#%u``
#%sの.0対応